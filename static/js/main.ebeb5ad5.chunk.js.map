{"version":3,"sources":["component/navbar.js","component/dialog.js","component/imageresult.js","component/search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","AppBar_default","title","Dialog","props","console","log","style","width","height","position","top","left","zIndex","display","justifyContent","src","img","border","boxShadow","alt","onClick","close","color","background","right","ImageResult","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentimage","show","opendialog","bind","assertThisInitialized","closeimage","getimage","setState","_this2","GridList","cellHeight","GridListTile","key","cols","ListSubheader","component","array","map","item","id","largeImageURL","tags","GridListTileBar","subtitle","user","actionIcon","IconButton","Icon","Component","dotenv","Search","onChangeAmount","e","index","value","amount","searchText","images","onTextChange","target","fetch","concat","process","then","res","json","data","hits","TextField_default","name","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","imageresult","App","MuiThemeProvider_default","navbar","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ebeb5ad5.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from 'material-ui/AppBar';\nconst Navbar = () =><AppBar title=\"Image-Finder\"/>\nexport default Navbar;","import React from 'react'\n\nexport default function Dialog(props) {\n    console.log(props)\n    return (\n        <div style={{width:\"90vw\",height:\"90vh\", position:\"fixed\",top:\"5vw\",left:\"5vh\",zIndex:\"22\",display:\"flex\",justifyContent:\"center\"}}>\n        <img src={props.img} style={{border:\"2px solid white\",boxShadow:\"5px 5px 20px black\"}} alt=\"Image1\" width=\"95%\" height=\"90%\" />\n        <button onClick={props.close} style={{position:\"absolute\",color:\"white\",background:\"black\",top:\"5%\",right:\"5%\",zIndex:\"22\"}}>X</button>\n      </div>\n    )\n}\n","import React,{Component} from 'react';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport Dialog from \"./dialog\";\n\n class ImageResult extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n          currentimage:\"\",\n          show:false\n        }\n        this.opendialog=this.opendialog.bind(this);\n        this.closeimage=this.closeimage.bind(this);\n    }\n    opendialog(img){\n      console.log(img)\n        let getimage=img;\n      this.setState({\n        currentimage:getimage,\n        show:true\n      })\n    }\n    closeimage(){\n      this.setState({\n        show:false\n      })\n    }\n    render(){\n\n      console.log(this.state.currentimage)\n\n  return (\n \n    <div >\n      <GridList cellHeight={280}>\n        <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n          <ListSubheader component=\"div\"></ListSubheader>\n        </GridListTile>\n        {this.props.array.map(item => (\n          <GridListTile key={item.id}>\n            <img src={item.largeImageURL} alt={item.tags} width=\"300px\" />\n            <GridListTileBar\n              title={item.tags}\n              subtitle={<span>by: {item.user}</span>}\n              actionIcon={\n                <IconButton style={{color:\"white\"}}  onClick={()=>this.opendialog(item.largeImageURL)}>\n                <Icon color=\"action\" style={{color:\"white\"}}>\n                      O\n                     </Icon>\n                </IconButton>\n              }\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n      {(this.state.show)?<Dialog img={this.state.currentimage} close={this.closeimage}/>:null}\n    </div>\n  );\n}\n}\nexport default ImageResult;","import React,{Component} from 'react';\nimport TextField from \"material-ui/TextField\";\nimport SelectField from \"material-ui/SelectField\";\nimport MenuItem from \"material-ui/MenuItem\";\nimport ImageResult from \"./imageresult\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nexport default class Search extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            searchText:\"\",\n            amount:15,\n            images: []\n        };\n        this.onTextChange=this.onTextChange.bind(this);\n       \n    }\n    \n    onTextChange (e) {\n        this.setState({\n         searchText:e.target.value },()=>{\n             fetch(`https://pixabay.com/api/?key=${process.env.REACT_APP_KEY}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\n             .then(res=>res.json()).then(data=>{this.setState({images:data.hits})\n            console.log(data.hits)})\n         })\n    }\n    onChangeAmount = (e,index,value)=>{\n        console.log(value)\n        this.setState({\n            amount:value\n        })\n    }\n    render(){\n\n    return (\n        <div>\n           <TextField \n           name=\"searchText\"\n           value={this.state.searchText}\n           onChange={this.onTextChange}\n           floatingLabelText=\"Search for Images\"\n           fullWidth={true}/>\n\n            <SelectField \n            name=\"amount\"\n            value={this.state.amount}\n            onChange={this.onChangeAmount}\n            floatingLabelText=\"Amount\"\n            >\n            <MenuItem value={5} primaryText=\"5\"/>\n            <MenuItem value={10} primaryText=\"10\"/>\n            <MenuItem value={15} primaryText=\"15\"/>\n            <MenuItem value={25} primaryText=\"25\"/>\n            <MenuItem value={50} primaryText=\"50\"/>\n            </SelectField>\n            {<ImageResult array={this.state.images}/>}\n        </div>\n    )\n}\n}\n","import React, { Component } from 'react';\nimport \"./App.css\";\nimport Navbar from \"./component/navbar\";\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\nimport Search from \"./component/search\";\n\n\nexport default class App extends Component {\n  render() {\n    return (\n    <MuiThemeProvider>\n      <div style={{position:\"relative\"}}>\n        <Navbar/>\n        <Search/>\n      </div>\n      </MuiThemeProvider>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}